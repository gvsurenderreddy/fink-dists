--- wxPython/src/generic/dcpsg.cpp	2004-08-09 17:36:39.000000000 -0400
+++ wxPython/src/generic/dcpsg.cpp	2007-03-12 15:44:47.000000000 -0400
@@ -1201,21 +1201,21 @@
   wxPostScriptDC* caller;
 };
 
-static int paps_move_to( FT_Vector* to, void *user_data)
+static int paps_move_to( const FT_Vector* to, void *user_data)
 {
   OutlineInfo *outline_info = (OutlineInfo*)user_data;
   outline_info->caller->PsPrintf( wxT("%d %d moveto\n"), (int)to->x, (int)to->y );
   return 0;
 }
 
-static int paps_line_to( FT_Vector*  to, void *user_data)
+static int paps_line_to( const FT_Vector*  to, void *user_data)
 {
   OutlineInfo *outline_info = (OutlineInfo*)user_data;
   outline_info->caller->PsPrintf( wxT("%d %d lineto\n"), (int)to->x , (int)to->y );
   return 0;
 }
 
-static int paps_conic_to( FT_Vector*  control, FT_Vector*  to, void *user_data)
+static int paps_conic_to( const FT_Vector*  control, const FT_Vector*  to, void *user_data)
 {
   OutlineInfo *outline_info = (OutlineInfo*)user_data;
   outline_info->caller->PsPrintf( wxT("%d %d %d %d conicto\n"),
@@ -1227,8 +1227,8 @@
 }
 
 static int
-paps_cubic_to( FT_Vector*  control1, FT_Vector*  control2,
-               FT_Vector*  to, void *user_data)
+paps_cubic_to( const FT_Vector*  control1, const FT_Vector*  control2,
+               const FT_Vector*  to, void *user_data)
 {
   OutlineInfo *outline_info = (OutlineInfo*)user_data;
   outline_info->caller->PsPrintf(wxT("%d %d %d %d %d %d curveto\n"),
--- wxPython/config.py	2004-08-27 14:53:18.000000000 -0400
+++ wxPython/config.py	2007-03-12 15:44:24.000000000 -0400
@@ -664,40 +664,31 @@
     WXPREFIX   = os.popen(WX_CONFIG + ' --prefix').read()[:-1]
 
 
-    if sys.platform[:6] == "darwin":
-        # Flags and such for a Darwin (Max OS X) build of Python
-        WXPLAT = '__WXMAC__'
-        GENDIR = 'mac'
-        libs = ['stdc++']
-        NO_SCRIPTS = 1
-
+    # Set flags for other Unix type platforms
+    GENDIR = WXPORT
 
+    if WXPORT == 'gtk':
+        WXPLAT = '__WXGTK__'
+        portcfg = os.popen('gtk-config --cflags', 'r').read()[:-1]
+    elif WXPORT == 'gtk2':
+        WXPLAT = '__WXGTK__'
+        GENDIR = 'gtk' # no code differences so use the same generated sources
+        portcfg = os.popen('pkg-config gtk+-2.0 --cflags', 'r').read()[:-1]
+        BUILD_BASE = BUILD_BASE + '-' + WXPORT
+    elif WXPORT == 'x11':
+        WXPLAT = '__WXX11__'
+        portcfg = ''
+        BUILD_BASE = BUILD_BASE + '-' + WXPORT
     else:
-        # Set flags for other Unix type platforms
-        GENDIR = WXPORT
-
-        if WXPORT == 'gtk':
-            WXPLAT = '__WXGTK__'
-            portcfg = os.popen('gtk-config --cflags', 'r').read()[:-1]
-        elif WXPORT == 'gtk2':
-            WXPLAT = '__WXGTK__'
-            GENDIR = 'gtk' # no code differences so use the same generated sources
-            portcfg = os.popen('pkg-config gtk+-2.0 --cflags', 'r').read()[:-1]
-            BUILD_BASE = BUILD_BASE + '-' + WXPORT
-        elif WXPORT == 'x11':
-            WXPLAT = '__WXX11__'
-            portcfg = ''
-            BUILD_BASE = BUILD_BASE + '-' + WXPORT
-        else:
-            raise SystemExit, "Unknown WXPORT value: " + WXPORT
+        raise SystemExit, "Unknown WXPORT value: " + WXPORT
 
-        cflags += portcfg.split()
+    cflags += portcfg.split()
 
-        # Some distros (e.g. Mandrake) put libGLU in /usr/X11R6/lib, but
-        # wx-config doesn't output that for some reason.  For now, just
-        # add it unconditionally but we should really check if the lib is
-        # really found there or wx-config should be fixed.
-        libdirs.append("/usr/X11R6/lib")
+    # Some distros (e.g. Mandrake) put libGLU in /usr/X11R6/lib, but
+    # wx-config doesn't output that for some reason.  For now, just
+    # add it unconditionally but we should really check if the lib is
+    # really found there or wx-config should be fixed.
+    libdirs.append("/usr/X11R6/lib")
 
 
     # Move the various -I, -D, etc. flags we got from the *config scripts
@@ -705,7 +696,6 @@
     cflags = adjustCFLAGS(cflags, defines, includes)
     lflags = adjustLFLAGS(lflags, libdirs, libs)
 
-
 #----------------------------------------------------------------------
 else:
     raise 'Sorry, platform not supported...'
